import React from 'react';
import { useSelector } from 'react-redux';
import { RootState, TransitData } from '../../types';
import DataCard from './DataCard';

const TransitSummary: React.FC = () => {
    const transitData = useSelector((state: RootState) => state.transitData.data);
    const loading = useSelector((state: RootState) => state.transitData.loading);
    const error = useSelector((state: RootState) => state.transitData.error);

    if (loading) return <div className="loader-container"><div className="loader"></div> Loading transit data...</div>;
    if (error) return <div className="error-message">Error loading transit data: {error}</div>;
    if (!transitData) return <div className="no-data-message">No transit data available</div>;

    // Create transit lines data from routes
    const transitLines = transitData.routes.slice(0, 5).map(route => ({
        line: `${route.shortName} - ${route.longName}`,
        status: 'On Time'
    }));

    // Get disruptions from service alerts
    const allDisruptions = transitData.serviceAlerts.map(alert => ({
        id: alert.id,
        title: alert.header,
        description: alert.description || 'Service disruption',
        affectedLines: alert.routeIds || [],
        severity: alert.severity || 'medium'
    }));

    // Create schedule entries from trip updates
    const schedules = transitData.tripUpdates.flatMap(update => 
        update.stopTimeUpdates.map(stopTime => ({
            id: `${update.tripId}-${stopTime.stopId}`,
            route: update.routeId,
            stopId: stopTime.stopId,
            arrivalTime: stopTime.arrival?.time || new Date().toISOString(),
            status: stopTime.scheduleRelationship || 'SCHEDULED'
        }))
    );

    return (
        <div className="transit-summary">
            <h3>Transit Status</h3>
            
            <div className="transit-lines">
                {transitLines.map((transit, index) => (
                    <DataCard
                        key={index}
                        title={transit.line}
                        value={transit.status}
                        icon={getTransitIcon(transit.line)}
                    />
                ))}
            </div>
            
            {allDisruptions.length > 0 && (
                <div className="disruptions-section">
                    <h4>Service Disruptions</h4>
                    <ul className="disruptions-list">
                        {allDisruptions.map(disruption => (
                            <li key={disruption.id} className="disruption-item">
                                <div className="disruption-title">{disruption.title}</div>
                                <div className="disruption-description">
                                    {disruption.description}
                                </div>
                                {disruption.affectedLines.length > 0 && (
                                    <div className="disruption-lines">
                                        Affecting: {disruption.affectedLines.join(', ')}
                                    </div>
                                )}
                            </li>
                        ))}
                    </ul>
                </div>
            )}

            <div className="upcoming-arrivals">
                <h4>Upcoming Arrivals</h4>
                {schedules.length > 0 ? (
                    <div className="arrivals-list">
                        {schedules
                            .sort((a, b) => new Date(a.arrivalTime).getTime() - new Date(b.arrivalTime).getTime())
                            .slice(0, 5) // Show only the next 5 arrivals
                            .map((arrival, index) => (
                                <div key={index} className="arrival-item">
                                    <div className="arrival-line">Route {arrival.route}</div>
                                    <div className="arrival-time">
                                        {formatArrivalTime(arrival.arrivalTime)}
                                    </div>
                                    <div className={`arrival-status status-${arrival.status.toLowerCase()}`}>
                                        {formatStatus(arrival.status)}
                                    </div>
                                </div>
                            ))
                        }
                    </div>
                ) : (
                    <p>No upcoming arrivals scheduled.</p>
                )}
            </div>
        </div>
    );
};

// Helper function to get transit icon
const getTransitIcon = (line: string): React.ReactNode => {
    // Determine icon based on transit type
    if (line.toLowerCase().includes('bus')) {
        return '🚌';
    } else if (line.toLowerCase().includes('train') || line.toLowerCase().includes('rail')) {
        return '🚆';
    } else if (line.toLowerCase().includes('subway')) {
        return '🚇';
    } else if (line.toLowerCase().includes('tram')) {
        return '🚊';
    } else if (line.toLowerCase().includes('ferry')) {
        return '⛴️';
    } else {
        return '🚐';
    }
};

// Helper function to format arrival time
const formatArrivalTime = (isoDate: string): string => {
    try {
        const date = new Date(isoDate);
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    } catch (e) {
        return 'Scheduled';
    }
};

// Helper function to format status
const formatStatus = (status: string): string => {
    switch (status) {
        case 'SCHEDULED':
            return 'On Time';
        case 'CANCELED':
            return 'Canceled';
        case 'ADDED':
            return 'Added';
        case 'UNSCHEDULED':
            return 'Unscheduled';
        case 'REPLACEMENT':
            return 'Replacement';
        default:
            return status;
    }
};

export default TransitSummary;
