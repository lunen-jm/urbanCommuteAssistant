import React, { useState, useEffect, ChangeEvent } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { AppDispatch } from '../../store';
import { updatePreferences } from '../../store/userSlice';
import { RootState } from '../../types';
import './ProfileSettings.css';

const ProfileSettings: React.FC = () => {
    const dispatch = useDispatch<AppDispatch>();
    const user = useSelector((state: RootState) => state.user);
    
    const [formData, setFormData] = useState({
        name: user.name || '',
        email: user.email || '',
        preferences: {
            darkMode: user.preferences.darkMode || false,
            notificationsEnabled: false, // Default value
            preferredTransportModes: [...(user.preferences.preferredTransportModes || [])]
        }
    });
    
    const [isEditing, setIsEditing] = useState(false);
    const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'success' | 'error'>('idle');

    // Update form when user state changes
    useEffect(() => {
        setFormData({
            name: user.name || '',
            email: user.email || '',
            preferences: {
                darkMode: user.preferences.darkMode || false,
                notificationsEnabled: false, // Default since not in our UserState interface
                preferredTransportModes: [...(user.preferences.preferredTransportModes || [])]
            }
        });
    }, [user]);

    const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setFormData({
            ...formData,
            [name]: value
        });
    };

    const handleTransportModeToggle = (mode: string) => {
        const currentModes = [...formData.preferences.preferredTransportModes];
        const index = currentModes.indexOf(mode);
        
        if (index > -1) {
            // Remove mode if already selected
            currentModes.splice(index, 1);
        } else {
            // Add mode if not selected
            currentModes.push(mode);
        }
        
        setFormData({
            ...formData,
            preferences: {
                ...formData.preferences,
                preferredTransportModes: currentModes
            }
        });
    };

    const handleNotificationsToggle = () => {
        setFormData({
            ...formData,
            preferences: {
                ...formData.preferences,
                notificationsEnabled: !formData.preferences.notificationsEnabled
            }
        });
    };

    const handleEdit = () => {
        setIsEditing(true);
        setSaveStatus('idle');
    };
    
    const handleCancel = () => {
        // Reset form to user state
        setFormData({
            name: user.name || '',
            email: user.email || '',
            preferences: {
                darkMode: user.preferences.darkMode || false,
                notificationsEnabled: false,
                preferredTransportModes: [...(user.preferences.preferredTransportModes || [])]
            }
        });
        setIsEditing(false);
        setSaveStatus('idle');
    };
    
    const handleSave = async () => {
        setSaveStatus('saving');
        try {
            // Dispatch action to update user preferences
            dispatch(updatePreferences({
                darkMode: formData.preferences.darkMode,
                preferredTransportModes: formData.preferences.preferredTransportModes,
                notificationSettings: {
                    email: formData.preferences.notificationsEnabled,
                    push: formData.preferences.notificationsEnabled,
                    sms: formData.preferences.notificationsEnabled
                }
            }));
            
            setSaveStatus('success');
            setIsEditing(false);
        } catch (error) {
            console.error('Failed to update profile', error);
            setSaveStatus('error');
        }
    };

    const transportModes = ['Bus', 'Train', 'Car', 'Bicycle', 'Walking'];

    return (
        <div className="profile-settings">
            <div className="profile-settings-header">
                <h3>Profile Settings</h3>
                
                {!isEditing ? (
                    <button className="edit-btn" onClick={handleEdit}>
                        Edit Profile
                    </button>
                ) : (
                    <div className="edit-actions">
                        <button className="cancel-btn" onClick={handleCancel}>
                            Cancel
                        </button>
                        <button 
                            className="save-btn" 
                            onClick={handleSave}
                            disabled={saveStatus === 'saving'}
                        >
                            {saveStatus === 'saving' ? 'Saving...' : 'Save Changes'}
                        </button>
                    </div>
                )}
            </div>
            
            {saveStatus === 'success' && (
                <div className="alert alert-success">Profile updated successfully!</div>
            )}
            
            {saveStatus === 'error' && (
                <div className="alert alert-error">Failed to update profile. Please try again.</div>
            )}
            
            <div className="profile-form">
                <div className="form-group">
                    <label htmlFor="name">Name</label>
                    <input
                        id="name"
                        type="text"
                        name="name"
                        value={formData.name}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className={!isEditing ? 'disabled' : ''}
                    />
                </div>
                
                <div className="form-group">
                    <label htmlFor="email">Email</label>
                    <input
                        id="email"
                        type="email"
                        name="email"
                        value={formData.email}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className={!isEditing ? 'disabled' : ''}
                    />
                </div>
                
                <fieldset className="transport-modes">
                    <legend>Preferred Transport Modes</legend>
                    <div className="checkboxes">
                        {transportModes.map(mode => (
                            <label key={mode} className={!isEditing ? 'disabled' : ''}>
                                <input
                                    type="checkbox"
                                    checked={formData.preferences.preferredTransportModes.includes(mode)}
                                    onChange={() => handleTransportModeToggle(mode)}
                                    disabled={!isEditing}
                                />
                                {mode}
                            </label>
                        ))}
                    </div>
                </fieldset>
                
                <div className="form-group switch-container">
                    <label className={!isEditing ? 'disabled' : ''}>
                        <span>Enable Notifications</span>
                        <input
                            type="checkbox"
                            className="toggle-switch"
                            checked={formData.preferences.notificationsEnabled}
                            onChange={handleNotificationsToggle}
                            disabled={!isEditing}
                        />
                        <span className="slider"></span>
                    </label>
                </div>
            </div>
        </div>
    );
};

export default ProfileSettings;
