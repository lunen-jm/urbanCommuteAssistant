import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import { fetchTransitData } from '../services/api';
import { TransitData, TransitDataState } from '../types';

interface LocationParams {
  latitude: number;
  longitude: number;
}

export const getTransitData = createAsyncThunk(
  'transitData/getTransitData',
  async (location: LocationParams) => {
    const response = await fetchTransitData(location);
    return response as TransitData;
  }
);

const initialState: TransitDataState = {
  data: null,
  loading: false,
  error: null,
};

export const transitDataSlice = createSlice({
  name: 'transitData',
  initialState,
  reducers: {
    clearTransitData: (state) => {
      state.data = null;
      state.loading = false;
      state.error = null;
    },
    setTransitData: (state, action: PayloadAction<TransitData>) => {
      state.data = action.payload;
      state.loading = false;
      state.error = null;
    }
  },
  extraReducers: (builder) => {
    builder
      .addCase(getTransitData.pending, (state) => {
        state.loading = true;
      })
      .addCase(getTransitData.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload;
      })
      .addCase(getTransitData.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to get transit data';
      });
  },
});

export const { clearTransitData, setTransitData } = transitDataSlice.actions;
export default transitDataSlice.reducer;
