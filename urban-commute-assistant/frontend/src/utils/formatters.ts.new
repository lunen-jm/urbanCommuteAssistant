// filepath: c:\Users\jaden\Documents\GitHub\TECHIN510-Developer\urban-commute-assistant\frontend\src\utils\formatters.ts
import { TrafficIncident, WeatherData, TransitSchedule } from '../types';

// Helper function to get severity label from numeric severity
export const getSeverityLabel = (severity: number): string => {
    switch (severity) {
        case 1:
            return 'low';
        case 2:
            return 'moderate';
        case 3:
            return 'high';
        case 4:
            return 'severe';
        default:
            return 'unknown';
    }
};

// Helper function to format location coordinates
export const formatLocation = (location: { lat: number, lon: number }): string => {
    return `${location.lat.toFixed(4)}, ${location.lon.toFixed(4)}`;
};

// Helper function to format arrival time
export const formatArrivalTime = (date: Date): string => {
    return date.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' });
};

// Format traffic data for display
export const formatTrafficData = (data: TrafficIncident[]): { id: string; status: string; delay: string; location: string; updatedAt: string }[] => {
    return data.map(item => ({
        id: item.id,
        status: getSeverityLabel(item.severity),
        delay: item.description,
        location: formatLocation(item.location),
        updatedAt: new Date().toLocaleTimeString(),
    }));
};

// Format weather data for display
export const formatWeatherData = (data: WeatherData): { temperature: number | null; description: string; humidity: number | null; windSpeed: number | null; updatedAt: string } => {
    return {
        temperature: data.temperature,
        description: data.description,
        humidity: data.humidity,
        windSpeed: data.windSpeed,
        updatedAt: new Date().toLocaleTimeString(),
    };
};

// Format transit data for display
export const formatTransitData = (data: TransitSchedule[]): { id: string; route: string; arrivalTime: string; status: string }[] => {
    return data.map(item => ({
        id: item.stopId + item.routeId,
        route: item.routeName,
        arrivalTime: item.arrivalTime,
        status: item.status,
    }));
};
